import os
import discord
from discord.ext import commands
from discord import app_commands
import random
import datetime
import logging

from myserver import server_on  # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡∏¥‡∏î Flask server ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ö‡∏≠‡∏ó‡πÑ‡∏°‡πà‡∏´‡∏•‡∏±‡∏ö

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(name)s: %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S",
)
logger = logging.getLogger("BotGreenzone")

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Intents
intents = discord.Intents.default()
intents.message_content = True
intents.members = True

GUILD_ID = 692383463206027304

# ‡∏õ‡∏¥‡∏î default help command
client = commands.Bot(command_prefix="!", intents=intents, help_command=None)
client.remove_command("help")

class MyClient(commands.Bot):
    def __init__(self):
        super().__init__(command_prefix="!", intents=intents, help_command=None)
    
    async def setup_hook(self):
        try:
            guild = discord.Object(id=GUILD_ID)
            # Sync ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô guild
            synced = await self.tree.sync(guild=guild)
            logger.info(f"‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á Slash Sync ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö guild ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! (‡∏ã‡∏¥‡∏á‡∏Ñ‡πå {len(synced)} ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á)")
        except Exception as e:
            logger.exception("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô setup_hook")

client = MyClient()

@client.event
async def on_ready():
    logger.info(f"‚úÖ ‡∏ö‡∏≠‡∏ó {client.user} ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß!")

@client.event
async def on_message(message):
    if message.author.bot:
        return

    logger.info(f"on_message: Received message from {message.author}: {message.content}")

    try:
        if message.content.strip() == "‡πÉ‡∏Ñ‡∏£":
            await message.channel.send("‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô")
            logger.info("‡∏ï‡∏≠‡∏ö '‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô' ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° '‡πÉ‡∏Ñ‡∏£'")
        if message.content.strip() == "‡∏Å‡∏¥‡∏Å‡∏µ‡πâ":
            await message.channel.send("‡πÄ‡∏î‡πá‡∏Å‡∏≠‡πâ‡∏ß‡∏ô")
            logger.info("‡∏ï‡∏≠‡∏ö '‡πÄ‡∏î‡πá‡∏Å‡∏≠‡πâ‡∏ß‡∏ô' ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° '‡∏Å‡∏¥‡∏Å‡∏µ‡πâ'")
        if message.content.strip() == "‡∏ï‡∏≠‡∏á":
            await message.channel.send("‡∏Ç‡∏≤‡πÉ‡∏´‡∏ç‡πà")
            logger.info("‡∏ï‡∏≠‡∏ö '‡∏Ç‡∏≤‡πÉ‡∏´‡∏ç‡πà' ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° '‡∏ï‡∏≠‡∏á'")
        if message.content.strip() == "‡∏´‡∏°‡∏π":
            await message.channel.send("‡∏ï‡∏≠‡∏á")
            logger.info("‡∏ï‡∏≠‡∏ö '‡∏ï‡∏≠‡∏á' ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° '‡∏´‡∏°‡∏π'")
    except Exception as e:
        logger.exception("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô on_message")

    await client.process_commands(message)

# /bothelp
@client.tree.command(name="bothelp", description="‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", guild=discord.Object(id=GUILD_ID))
async def bothelp(interaction: discord.Interaction):
    try:
        embed = discord.Embed(
            title="üß© ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó",
            description="‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ:",
            color=discord.Color.green()
        )
        embed.add_field(name="/roll", value="‡∏ó‡∏≠‡∏¢‡πÄ‡∏ï‡πã‡∏≤ 1-6", inline=False)
        embed.add_field(name="/coinflip", value="‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏´‡∏±‡∏ß-‡∏Å‡πâ‡∏≠‡∏¢", inline=False)
        embed.add_field(name="/mute", value="Mute ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡∏ô‡∏≤‡∏ó‡∏µ)", inline=False)
        embed.add_field(name="/unmute", value="‡∏õ‡∏•‡∏î mute ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å", inline=False)
        embed.add_field(name="/mutestatus", value="‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ç‡∏≠‡∏á mute ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å", inline=False)
        embed.add_field(name="/8ball", value="‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÅ‡∏•‡πâ‡∏ß‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°", inline=False)
        embed.set_footer(text="‡πÇ‡∏î‡∏¢‡∏ö‡∏≠‡∏ó‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ‚ù§Ô∏è")
        logger.info(f"/bothelp: ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ {interaction.user} ‡∏Ç‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á")
        await interaction.response.send_message(embed=embed)
    except Exception as e:
        logger.exception("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô /bothelp")
        await interaction.response.send_message("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á help", ephemeral=True)

# /roll
@client.tree.command(name="roll", description="‡∏ó‡∏≠‡∏¢‡πÄ‡∏ï‡πã‡∏≤ 1-6", guild=discord.Object(id=GUILD_ID))
async def roll(interaction: discord.Interaction):
    try:
        num = random.randint(1, 6)
        logger.info(f"/roll: ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ {interaction.user} ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏Ç {num}")
        await interaction.response.send_message(f"üé≤ ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏Ç **{num}**")
    except Exception as e:
        logger.exception("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô /roll")

# /coinflip
@client.tree.command(name="coinflip", description="‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏´‡∏±‡∏ß-‡∏Å‡πâ‡∏≠‡∏¢", guild=discord.Object(id=GUILD_ID))
async def coinflip(interaction: discord.Interaction):
    try:
        result = random.choice(["‡∏´‡∏±‡∏ß", "‡∏Å‡πâ‡∏≠‡∏¢"])
        logger.info(f"/coinflip: ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ {interaction.user} ‡πÑ‡∏î‡πâ‡∏ú‡∏• {result}")
        await interaction.response.send_message(f"ü™ô ‡∏≠‡∏≠‡∏Å **{result}**")
    except Exception as e:
        logger.exception("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô /coinflip")

# /mute
@client.tree.command(name="mute", description="Mute ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå (‡∏ó‡∏±‡πâ‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡πÄ‡∏™‡∏µ‡∏¢‡∏á) ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏", guild=discord.Object(id=GUILD_ID))
@app_commands.describe(
    member="‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ mute",
    duration="‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤ (‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç)",
    unit="‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÄ‡∏ß‡∏•‡∏≤"
)
@app_commands.choices(unit=[
    app_commands.Choice(name="‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ", value="s"),
    app_commands.Choice(name="‡∏ô‡∏≤‡∏ó‡∏µ", value="m")
])
async def mute(interaction: discord.Interaction, member: discord.Member, duration: int, unit: str):
    try:
        logger.info(f"/mute: ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ {interaction.user} ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏° mute {member} ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ {duration} {unit}")
        if not interaction.user.guild_permissions.moderate_members:
            await interaction.response.send_message("‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ", ephemeral=True)
            logger.warning(f"/mute: ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ {interaction.user} ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå")
            return

        if unit == "m":
            seconds = duration * 60
        elif unit == "s":
            seconds = duration
        else:
            await interaction.response.send_message("‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", ephemeral=True)
            logger.warning(f"/mute: ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ {interaction.user} ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
            return

        until = discord.utils.utcnow() + datetime.timedelta(seconds=seconds)
        
        full_member = interaction.guild.get_member(member.id)
        if full_member is None:
            full_member = await interaction.guild.fetch_member(member.id)
        
        await full_member.timeout(until)
        await interaction.response.send_message(f"‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å {member.mention} ‡∏ñ‡∏π‡∏Å mute ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ {duration} {'‡∏ô‡∏≤‡∏ó‡∏µ' if unit == 'm' else '‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ'}.")
        logger.info(f"/mute: mute ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {member}")
    except Exception as e:
        logger.exception("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô /mute")
        await interaction.response.send_message(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}", ephemeral=True)

# /unmute
@client.tree.command(name="unmute", description="‡∏õ‡∏•‡∏î mute ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å", guild=discord.Object(id=GUILD_ID))
@app_commands.describe(member="‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏•‡∏î mute")
async def unmute(interaction: discord.Interaction, member: discord.Member):
    try:
        full_member = interaction.guild.get_member(member.id)
        if full_member is None:
            full_member = await interaction.guild.fetch_member(member.id)
        
        await full_member.timeout(None)
        await interaction.response.send_message(f"‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å {member.mention} ‡∏ñ‡∏π‡∏Å‡∏õ‡∏•‡∏î mute ‡πÅ‡∏•‡πâ‡∏ß")
        logger.info(f"/unmute: ‡∏õ‡∏•‡∏î mute ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {member}")
    except Exception as e:
        logger.exception("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô /unmute")
        await interaction.response.send_message(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}", ephemeral=True)

# /mutestatus
@client.tree.command(name="mutestatus", description="‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ç‡∏≠‡∏á mute ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å", guild=discord.Object(id=GUILD_ID))
@app_commands.describe(member="‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ mute")
async def mutestatus(interaction: discord.Interaction, member: discord.Member):
    try:
        full_member = interaction.guild.get_member(member.id)
        if full_member is None:
            full_member = await interaction.guild.fetch_member(member.id)
        
        timeout_until = full_member.timed_out_until
        if timeout_until is None:
            await interaction.response.send_message(f"‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å {member.mention} ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å mute")
            return
        
        now = discord.utils.utcnow()
        remaining = timeout_until - now
        if remaining.total_seconds() <= 0:
            await interaction.response.send_message(f"‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å {member.mention} ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å mute")
            return

        minutes = remaining.total_seconds() / 60
        await interaction.response.send_message(f"‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å {member.mention} ‡∏ñ‡∏π‡∏Å mute ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ {minutes:.2f} ‡∏ô‡∏≤‡∏ó‡∏µ")
    except Exception as e:
        logger.exception("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô /mutestatus")
        await interaction.response.send_message(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}", ephemeral=True)

# /duel
@client.tree.command(name="duel", description="‡πÉ‡∏´‡πâ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏≠‡∏á‡∏Ñ‡∏ô‡∏°‡∏≤‡∏™‡∏π‡πâ‡∏Å‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏∏‡πà‡∏°‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞", guild=discord.Object(id=GUILD_ID))
@app_commands.describe(
    member1="‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Ñ‡∏ô‡πÅ‡∏£‡∏Å",
    member2="‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á"
)
async def duel(interaction: discord.Interaction, member1: discord.Member, member2: discord.Member):
    try:
        logger.info(f"/duel: ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ {interaction.user} ‡∏Ç‡∏≠ duel ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á {member1} ‡∏Å‡∏±‡∏ö {member2}")
        if member1 == member2:
            await interaction.response.send_message("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏´‡πâ‡∏Ñ‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏™‡∏π‡πâ‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ!", ephemeral=True)
            logger.warning(f"/duel: ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏ñ‡∏π‡∏Å‡∏£‡∏∞‡∏ö‡∏∏")
            return

        winner = random.choice([member1, member2])
        embed = discord.Embed(
            title="‚öîÔ∏è ‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏™‡∏π‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß!",
            description=f"{member1.mention} vs {member2.mention}",
            color=discord.Color.purple()
        )
        embed.add_field(name="‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞", value=winner.mention, inline=False)
        await interaction.response.send_message(embed=embed)
        logger.info(f"/duel: ‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞‡∏Ñ‡∏∑‡∏≠ {winner}")
    except Exception as e:
        logger.exception("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô /duel")
        await interaction.response.send_message(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}", ephemeral=True)

# /8ball
@client.tree.command(name="8ball", description="‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÅ‡∏•‡πâ‡∏ß‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°", guild=discord.Object(id=GUILD_ID))
@app_commands.describe(question="‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì")
async def eight_ball(interaction: discord.Interaction, question: str):
    responses = [
        "‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô!", 
        "‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô‡∏ô‡∏∞", 
        "‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á", 
        "‡∏â‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡πÉ‡∏à", 
        "‡∏î‡∏π‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏ß‡πà‡∏≤‡∏°‡∏±‡∏ô‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ", 
        "‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î", 
        "‡πÅ‡∏Ñ‡πà‡∏Ñ‡∏¥‡∏î‡∏ö‡∏ß‡∏Å‡πÑ‡∏ß‡πâ!", 
        "‡∏á‡∏±‡πâ‡∏ô‡∏•‡∏≠‡∏á‡∏î‡∏π‡∏ô‡∏∞"
    ]
    answer = random.choice(responses)
    await interaction.response.send_message(f"‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°: {question}\n‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö: {answer}")

# ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Flask server (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏≠‡∏õ‡πÑ‡∏°‡πà‡∏´‡∏•‡∏±‡∏ö)
server_on()

# ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ö‡∏≠‡∏ó‡∏î‡πâ‡∏ß‡∏¢ client
client.run(os.getenv('TOKEN'))
